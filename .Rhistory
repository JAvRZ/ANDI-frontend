library(rrdf)
install.packages("rrdf")
install.packages("rrdf")
q()
install.packages("rredland")
q()
library(rols)
install.packages("~/Desktop/RDF_1.1.tar.gz", repos = NULL, type = "source")
library(RDF)
library(rrdf)
mydb = dbConnect(MySQL(), user='root', password='p051D0n10', dbname='breedb', host='localhost')
mydb = dbConnect(MySQL(), user='root', password='p051D0n10', dbname='breedb', host='localhost')
library(RMySQL)
mydb = dbConnect(MySQL(), user='root', password='p051D0n10', dbname='breedb', host='localhost')
table_list<- dbListTables(mydb)
table_list
library(Rredland)
library(rredland)
library(RMySQL)
library(RDF)
library(rrdf)
library(sqldf)
mydb = dbConnect(MySQL(), user='root', password='p051D0n10', dbname='breedb', host='localhost')
table_list<- dbListTables(mydb)
field_names<- dbListFields(mydb, 'pp_accession')
rs = dbGetQuery(mydb, "select * from pp_accession") # result remains on the MySQL database
# Filter for selected germ plasm field
# https://www.eu-sol.wur.nl/fair/v1/germplasm/EA00258
# Example row 5693
sample_data<-rs[5693,c("accessionID","gpsLat_txt","gpsLong_txt","taxonomyID","dateCreated")]
sample_data
# create triple data.frame
subject <- c('<http://test/a>', '<http://test/c>')
predicate <- c('<http://test/p>', '<http://test/q>')
object <- c('_:genid1', '"hallo"@nl')
triples <- data.frame(cbind(subject, predicate, object))
# save triple data.frame to RDF file
rdf_save(list(triples=triples,namespaces=c()),
target="rdftest.ttl", format="turtle",
spo=c("subject","predicate","object"),
namespaces=c('test', '<http://test/>'))
rdf_save(triples, target="rdftest.ttl", format="turtle",
namespaces=c('test', '<http://test/>'))
rdf_save
library(RDF)
rdf.ave()
rdf.save()
rdf.save
rdf_save()
triples
triples
rdf_save(triples)
rdf_save
library(Rredland)
source("http://bioconductor.org/biocLite.R")
biocLite("Rredland",depend=TRUE, type="source")
library(Rredland)
setRepositories()
install.packages("Rredland",depend=TRUE)
rdf_save(triples)
install.packages("Rredland",depend=TRUE)
library(RDF)
vignette()
vignette(RDF)
vignette("RDF")
help("RDF")
?rdf_save
?"RDF-package"
?"rrdf-package"
?"RDF-package"
rdf_save(triples, target="rdftest.rdf", format="rdfxml",
spo=c('subject','predicate','object'),
namespaces=c('test', '<http://test/>'))
r <- rdf_load("rdftest.ttl")
is.list(r)
is.data.frame(r$triples)
is.vector(r$namespaces)
rdf_load(https://www.eu-sol.wur.nl/fair/v1/germplasm/EA00258)
rdf_load("https://www.eu-sol.wur.nl/fair/v1/germplasm/EA00258")
rdf_save(triples, target="rdftest.rdf", format="rdfxml",
spo=c('subject','predicate','object'),
namespaces=c('test', '<http://test/>'))
source('~/Documents/ODEX4all/DB_Connect.R')
library(rrdf)
library(help=rrdf)
source('~/Documents/ODEX4all/DB_Connect.R')
?save.rdf
?add.triple
?save.rdf()
store = new.rdf()
add.triple(store,
subject="http://example.org/Subject",
predicate="http://example.org/Predicate",
object="http://example.org/Object")
save.rdf(store,"pp_accession.ttl","TURTLE")
getwd()
triples <- data.frame(cbind(subject, predicate, object))
triples
?add.triple
subject <- c('<http://test/a>', '<http://test/c>')
predicate <- c('<http://test/p>', '<http://test/q>')
object <- c('_:genid1', '"hallo"@nl')
triples <- data.frame(cbind(subject, predicate, object))
# Create a triple store
add.triple(store,subject, predicate,object)
store = new.rdf()
add.triple(store,subject,predicate,object)
add.triple(store,
subject="http://example.org/Subject",
predicate="http://example.org/Predicate",
object="http://example.org/Object")
save.rdf(store,"pp_accession.ttl","TURTLE")
sample_data
head(rs)
sample_data<-rs[5693,c("accessionID","accessionName","gpsLat_txt","gpsLong_txt","taxonomyID","dateCreated")]
desc<- dbGetQuery(mydb,"desc pp_accession ;") # get the description of the table metadata
object="http://example.org/Object"
# Create a triple store
store = new.rdf()
add.triple(store,subject,predicate,object)
subject="http://example.org/Subject",
predicate="http://example.org/Predicate",
object="http://example.org/Object"
subject="http://example.org/Subject"
predicate="http://example.org/Predicate"
object="http://example.org/Object"
# Create a triple store
store = new.rdf()
add.triple(store,subject,predicate,object)
store
save.rdf(store,"pp_accession.ttl","TURTLE")
head(rs)
sample_data
row.names(sample_data)
row.names(sample_data)<-FALSE
row.names(sample_data)
sample_data
row.names(sample_data)<-NULL
sample_data
row.names(sample_data)<-sample_data[,1]
sample_data
row.names(sample_data)<-sample_data[,1]
sample_Data
sample_data
sample_data<-sample_data[,2]
sample_data
colnames(sample_data)
col.names(sample_data)
sample_data
sample_data<-rs[5693,c("accessionID","accessionName","gpsLat_txt","gpsLong_txt","taxonomyID","dateCreated")]
sample_data
colnames(sample_data)
sample_data<-sample_data[,2:5]
sample_data
sample_data<-rs[5693,c("accessionID","accessionName","gpsLat_txt","gpsLong_txt","taxonomyID","dateCreated")]
row.names(sample_data)<-sample_data[,1]
sample_data<-sample_data[,2:5]
sample_data
library(help=rrdf)
source('~/Documents/ODEX4all/DB_Connect.R')
add.triple(store,subject,predicate,object)
save.rdf(store,"pp_accession.ttl","TURTLE")
add.triple(store,subject,predicate,object)
add.triple(store,subject,predicate,object)
add.triple(store,subject,predicate,object)
save.rdf(store,"pp_accession.ttl","TURTLE")
sample_data<-sample_data[,2:5]
#create triple data.frame for first accession name
subject="https://www.eu-sol.wur.nl/fair/v1/germplasm/"
predicate="http://example.org/Predicate/"
object="http://example.org/Object"
subject="https://www.eu-sol.wur.nl/fair/v1/germplasm/1"
predicate="http://example.org/Predicate/1"
object="http://example.org/Object1"
subject="https://www.eu-sol.wur.nl/fair/v1/germplasm/11"
predicate="http://example.org/Predicate/11"
object="http://example.org/Object11"
# Create a triple store
store = new.rdf()
add.triple(store,subject,predicate,object)
subject="https://www.eu-sol.wur.nl/fair/v1/germplasm/"
predicate="http://example.org/Predicate/"
object="http://example.org/Object"
add.triple(store,subject,predicate,object)
subject="https://www.eu-sol.wur.nl/fair/v1/germplasm/1"
predicate="http://example.org/Predicate/1"
object="http://example.org/Object1"
add.triple(store,subject,predicate,object)
save.rdf(store,"pp_accession.ttl","TURTLE")
sample_data<-rs[5693,c("accessionID","accessionName","gpsLat_txt","gpsLong_txt","taxonomyID","dateCreated")]
sample_data
rs
heaD(rs)
head(rs)
sample_data<-rs[1:5,c("accessionID","accessionName","gpsLat_txt","gpsLong_txt","taxonomyID","dateCreated")]
sample_data
row.names(sample_data)<-sample_data[,1]
sample_data
row.names(sample_data)<-sample_data[,1]
sample_data
sample_data<-sample_data[,2]
sample_data
row.names(sample_Data)
row.names(sample_data)
sample_data<-rs[1:5,c("accessionID","accessionName","gpsLat_txt","gpsLong_txt","taxonomyID","dateCreated")]
desc<- dbGetQuery(mydb,"desc pp_accession ;") # get the description of the table metadata
row.names(sample_data)<-sample_data[,1]
sample_data<-sample_data[,2:3]
sample_data
sample_data<-rs[1:5,c("accessionID","accessionName","gpsLat_txt","gpsLong_txt","taxonomyID","dateCreated")]
desc<- dbGetQuery(mydb,"desc pp_accession ;") # get the description of the table metadata
row.names(sample_data)<-sample_data[,1]
sample_data<-sample_data[,2:2]
sample_data
class(sample_data)
sample_data<-as.data.frame(sample_data[,2])
sample_data<-rs[1:5,c("accessionID","accessionName","gpsLat_txt","gpsLong_txt","taxonomyID","dateCreated")]
desc<- dbGetQuery(mydb,"desc pp_accession ;") # get the description of the table metadata
row.names(sample_data)<-sample_data[,1]
sample_data<-as.data.frame(sample_data[,2])
class(sample_data)
sample_Data
sample_data
sample_data<-rs[1:5,c("accessionID","accessionName")]
sample_data
row.names(sample_data)<-sample_data[,1]
sample_data
sample_data[,-1]
colnames(sample_data[,-1])
colnames(sample_data[,c(-1)])
library(RMySQL)
sample_data<-data.frame(sample_data[,2])
sample_data
sample_data<-rs[1:5,c("accessionID","accessionName")]
sample_data
row.names(sample_data)<-sample_data[,1]
sample_data
sample_data<-rs[1:5,c("accessionID","accessionName")]
sample_data
dim(sample_data)
source('~/Documents/ODEX4all/DB_Connect.R')
sample_data[1]
sample_data[1,1]
paste("https://www.eu-sol.wur.nl/fair/v1/germplasm/",sample[1,1])
paste("https://www.eu-sol.wur.nl/fair/v1/germplasm/",sample_data[1,1])
paste("https://www.eu-sol.wur.nl/fair/v1/germplasm/",sample_data[1,1],"")
paste("https://www.eu-sol.wur.nl/fair/v1/germplasm/",sample_data[1,1],sep="")
source('~/Documents/ODEX4all/DB_Connect.R')
source('~/Documents/ODEX4all/DB_Connect.R')
col.name(sample_data)
col.names(sample_data)
colnames
colnames(sample_data)
sample_data
sample_data[1,2]
source('~/Documents/ODEX4all/DB_Connect.R')
library(RMySQL)
#library(RDF)
library(rrdf)
#library(Rredland)
library(sqldf)
mydb = dbConnect(MySQL(), user='root', password='p051D0n10', dbname='breedb', host='localhost')
table_list<- dbListTables(mydb)
field_names<- dbListFields(mydb, 'pp_accession')
rs = dbGetQuery(mydb, "select * from pp_accession") # result remains on the MySQL database
# Filter for selected germ plasm field
# https://www.eu-sol.wur.nl/fair/v1/germplasm/EA00258
# Example row 5693
# sample_data<-rs[1:5,c("accessionID","accessionName","gpsLat_txt","gpsLong_txt","taxonomyID","dateCreated")]
sample_data<-rs[1:5,c("accessionID","accessionName")]
# desc<- dbGetQuery(mydb,"desc pp_accession ;") # get the description of the table metadata
#create triple data.frame for first accession name
# Create a triple store
store = new.rdf()
for (i in 1:dim(sample_data)[1]){
subject=paste("https://www.eu-sol.wur.nl/fair/v1/germplasm/",sample_data[i,1],sep="")
predicate=paste("http://example.org/Predicate/",colnames(sample_data[2])
object=sample_data[i,2]
add.triple(store,subject,predicate,object)
}
for (i in 1:dim(sample_data)[1])){
subject=paste("https://www.eu-sol.wur.nl/fair/v1/germplasm/",sample_data[i,1],sep="")
for (i in 1:dim(sample_data)[1]){
subject=paste("https://www.eu-sol.wur.nl/fair/v1/germplasm/",sample_data[i,1],sep="")
predicate=paste("http://example.org/Predicate/",colnames(sample_data[2]))
object=sample_data[i,2]
add.triple(store,subject,predicate,object)
}
save.rdf(store,"pp_accession.ttl","TURTLE")
source('~/Documents/ODEX4all/DB_Connect.R')
library(RMySQL)
#library(RDF)
library(rrdf)
#library(Rredland)
library(sqldf)
mydb = dbConnect(MySQL(), user='root', password='p051D0n10', dbname='breedb', host='localhost')
table_list<- dbListTables(mydb)
field_names<- dbListFields(mydb, 'pp_accession')
rs = dbGetQuery(mydb, "select * from pp_accession") # result remains on the MySQL database
# Filter for selected germ plasm field
# https://www.eu-sol.wur.nl/fair/v1/germplasm/EA00258
# Example row 5693
# sample_data<-rs[1:5,c("accessionID","accessionName","gpsLat_txt","gpsLong_txt","taxonomyID","dateCreated")]
sample_data<-rs[1:5,c("accessionID","accessionName")]
# desc<- dbGetQuery(mydb,"desc pp_accession ;") # get the description of the table metadata
#create triple data.frame for first accession name
# Create a triple store
store = new.rdf()
for (i in 1:dim(sample_data)[1]){
subject=paste("https://www.eu-sol.wur.nl/fair/v1/germplasm/",sample_data[i,1],sep="")
predicate=paste("http://example.org/Predicate/",colnames(sample_data[2]),sep="")
object=sample_data[i,2]
add.triple(store,subject,predicate,object,sep="")
}
save.rdf(store,"pp_accession.ttl","TURTLE")
source('~/Documents/ODEX4all/DB_Connect.R')
source('~/Documents/ODEX4all/DB_Connect.R')
sample_data<-rs[,c("accessionID","accessionName")]
sample_data
# desc<- dbGetQuery(mydb,"desc pp_accession ;") # get the description of the table metadata
#create triple data.frame for first accession name
# Create a triple store
store = new.rdf()
for (i in 1:dim(sample_data)[1]){
subject=paste("https://www.eu-sol.wur.nl/fair/v1/germplasm/",sample_data[i,1],sep="")
predicate=paste("http://example.org/Predicate/",colnames(sample_data[2]),sep="")
object=sample_data[i,2]
add.triple(store,subject,predicate,object)
}
save.rdf(store,"pp_accession.ttl","TURTLE")
source('~/Documents/ODEX4all/DB_Connect.R')
source('~/Documents/ODEX4all/DB_Connect.R')
source('~/Documents/ODEX4all/BreeDB2RDF.R')
library(help=rdf)
library(help=rrdf)
source('~/Documents/ODEX4all/BreeDB2RDF.R')
source('~/Documents/ODEX4all/BreeDB2RDF.R')
source('~/Documents/ODEX4all/BreeDB2RDF.R')
source('~/Documents/ODEX4all/BreeDB2RDF.R')
library(rrdf)
vignette()
vignette("rrdf")
v1<-vignette("rrdf")
print(v1)
)
)
source('~/Documents/ODEX4all/Vignette_rrdf.R')
library(git2r)
path <- tempfile(pattern="git2r-")
dir.create(path)
repo <- init(path)
is_bare(repo)
path <- tempfile(pattern="git2r-")
dir.create(path)
path <- tempfile(pattern="git2r-")
dir.create(path)
is_bare(repo)
path <- file.path(tempfile(pattern="git2r-"), "git2r")
dir.create(path, recursive=TRUE)
repo <- clone("https://github.com/ropensci/git2r", path)
summary(repo)
getwd
getwd()
dir()
dir.create("./home/anandgavai/Documents/rrdf_vignette", recursive=TRUE)
path<-"/home/anandgavai/Documents/rrdf_vignette"
dir.create("./home/anandgavai/Documents/rrdf_vignette", recursive=TRUE)
path
repo <- clone("https://github.com/egonw/rrdf", path)
library(RMySQL)
library(rrdf)
library(rols)
library(paxtoolsr) # Access Pathway information in owl format
library(sqldf)  # Check Ontobee for a more comprehensive
mydb = dbConnect(MySQL(), user='root', password='p051D0n10', dbname='breedb', host='localhost')
table_list<- dbListTables(mydb)
field_names<- dbListFields(mydb, 'pp_accession')
dat = dbGetQuery(mydb, "select * from pp_accession") # result remains on the MySQL database
# Select latitude,longitude, collectionsitecountry, collectionSite, province
rs<-dat[,c("accessionID","accessionName","gpsLat","gpsLong","collectionSiteCountry","collectionSite","collectionSiteProvence")]
rs<-rs[which(rs[,"gpsLat"]!="NA"),]
# Filter for selected germ plasm field
# https://www.eu-sol.wur.nl/fair/v1/germplasm/EA00258
# Example row 5693
sample_data<-rs[,c("accessionID","accessionName")]
# desc<- dbGetQuery(mydb,"desc pp_accession ;") # get the description of the table metadata
# Create a triple store for each column make sure the primary key is the first column
# sample_data is table with 2 columns, prefix_pred is the prerix uri, type is the datatype of the column
# Create Triple store for data literals
create_triple_store_literal<-function(sample_data,prefix_pred,type){
# Create a triple store
store = new.rdf(ontology=TRUE)
for (i in 1:dim(sample_data)[1]){
subject=paste("https://www.eu-sol.wur.nl/fair/v1/germplasm/",sample_data[i,1],sep="")
predicate=paste(prefix_pred,colnames(sample_data[2]),sep="")
data=sample_data[i,2]
type=type
add.data.triple(store,subject,predicate,data,type)
}
save.rdf(store,paste(colnames(sample_data)[2],".ttl",sep=""),"TURTLE")
}
head(dat)
dat[,c(11,13)]
which(dat[,c(11,13)!="NA"]
)
which(dat[,11!]="NA")
which(dat[,11!]="NA")
which(dat[,11!]!="NA")
which(dat[,11]!="NA")
dat[which(dat[,11]!="NA"),]
dat[which(dat[,11]!="NA"),c(11,13)]
dat[which(dat[,11]!="NA"),c(1,11,13)]
dat[which(dat[,11]!="NA"),c(2,11,13)]
dat[which(dat[,11]!="NA"),c(3,11,13)]
colnames(dat)
dat[which(dat[,11]!="NA"),c(17,11,13)]
library(rjson)
vignette()
vignette("rjson")
vignette(package="rjson")
vignette(help="rjson")
dat[which(dat[,11]!="NA"),c(3,11,13)]
colnames(dat)
library(RMySQL)
library(rrdf)
library(rols)
library(paxtoolsr) # Access Pathway information in owl format
library(sqldf)  # Check Ontobee for a more comprehensive
mydb = dbConnect(MySQL(), user='root', password='p051D0n10', dbname='breedb', host='localhost')
table_list<- dbListTables(mydb)
field_names<- dbListFields(mydb, 'pp_accession')
dat = dbGetQuery(mydb, "select * from pp_accession") # result remains on the MySQL database
dat[which(dat[,11]!="NA"),c(11,13)]
colnames(dat)
dat[which(dat[,11]!="NA"),c(11,13)]
dat[which(dat[,11]!="NA"),c(11,13)][1]
dat[which(dat[,11]!="NA"),c(11,13)][1,]
dat[which(dat[,11]!="NA"),]
dat[which(dat[,11]!="NA"),][1,]
dat[which(dat[,11]!="NA"),][1,1]
dat[which(dat[,11]!="NA"),][,1]
dat[which(dat[,11]!="NA"),][,2]
colnames(dat)
dat[which(dat[,11]!="NA"),][,9]
dat[which(dat[,11]!="NA"),][,2]
dat[which(dat[,11]!="NA"),][,26]
dat[which(dat[,11]!="NA"),c(11,13)]
?readBin
infile1 <- "/var/scratch/bwn200/patterns/Agfa_Sensor505-x_0_1890.dat"
infile2 <- "/var/scratch/bwn200/patterns/Canon_Ixus55_0_2625.dat"
con <- file(infile1, "rb")
dim <- readBin(con, "integer",20155392)
close(con)
infile2 <- "/var/scratch/bwn200/patterns/Canon_Ixus55_0_2625.dat"
med<-read.csv("med.csv",header=TRUE)
getwd()
setwd("/home/anangavai/ClusterAnalysis")
setwd("/home/anangavai/ClusterAnalysis/")
setwd(/home/anangavai/ClusterAnalysis)
setwd("/home/anangavai/ClusterAnalysis")
setwd()
setwd(/home/anangavai/ClusterAnalysis)
setwd("/home/Desktop")
library(moments)
install.packages("moments")
install.packages("Rserve")
library("Rserve")
setwd("/home/anandgavai/ANDI/data/14-01-2016")
setwd("/home/anandgavai/ANDI/data/14-01-2016/")
getwd()
setwd("/home/anandgavai/ANDI")
setwd("/home/anandgavai/ANDI/data")
setwd("/home/anandgavai/ANDI/data/")
install.packages(c("arulesViz", "coin", "curl", "doBy", "earth", "fields", "git2r", "Hmisc", "knitr", "maps", "mclust", "mda", "mgcv", "mice", "party", "plotrix", "prodlim", "Rcpp", "rgl", "rmarkdown", "RMySQL", "rPython", "RUnit", "seriation", "spam", "timeSeries"))
install.packages(c("arulesViz", "coin", "curl", "doBy", "earth",
library (jsonlite)
library (httr)
library(dplyr)
setwd("/home/anandgavai/ANDI/data/14-01-2016/")
library (jsonlite)
setwd("/home/anandgavai/ANDI/data/14-01-2016/")
