add.data.triple(store,subject,predicate,data,type)
}
save.rdf(store,paste(colnames(sample_data)[2],".ttl",sep=""),"TURTLE")
}
head(dat)
dat[,c(11,13)]
which(dat[,c(11,13)!="NA"]
)
which(dat[,11!]="NA")
which(dat[,11!]="NA")
which(dat[,11!]!="NA")
which(dat[,11]!="NA")
dat[which(dat[,11]!="NA"),]
dat[which(dat[,11]!="NA"),c(11,13)]
dat[which(dat[,11]!="NA"),c(1,11,13)]
dat[which(dat[,11]!="NA"),c(2,11,13)]
dat[which(dat[,11]!="NA"),c(3,11,13)]
colnames(dat)
dat[which(dat[,11]!="NA"),c(17,11,13)]
library(rjson)
vignette()
vignette("rjson")
vignette(package="rjson")
vignette(help="rjson")
dat[which(dat[,11]!="NA"),c(3,11,13)]
colnames(dat)
library(RMySQL)
library(rrdf)
library(rols)
library(paxtoolsr) # Access Pathway information in owl format
library(sqldf)  # Check Ontobee for a more comprehensive
mydb = dbConnect(MySQL(), user='root', password='p051D0n10', dbname='breedb', host='localhost')
table_list<- dbListTables(mydb)
field_names<- dbListFields(mydb, 'pp_accession')
dat = dbGetQuery(mydb, "select * from pp_accession") # result remains on the MySQL database
dat[which(dat[,11]!="NA"),c(11,13)]
colnames(dat)
dat[which(dat[,11]!="NA"),c(11,13)]
dat[which(dat[,11]!="NA"),c(11,13)][1]
dat[which(dat[,11]!="NA"),c(11,13)][1,]
dat[which(dat[,11]!="NA"),]
dat[which(dat[,11]!="NA"),][1,]
dat[which(dat[,11]!="NA"),][1,1]
dat[which(dat[,11]!="NA"),][,1]
dat[which(dat[,11]!="NA"),][,2]
colnames(dat)
dat[which(dat[,11]!="NA"),][,9]
dat[which(dat[,11]!="NA"),][,2]
dat[which(dat[,11]!="NA"),][,26]
dat[which(dat[,11]!="NA"),c(11,13)]
?readBin
infile1 <- "/var/scratch/bwn200/patterns/Agfa_Sensor505-x_0_1890.dat"
infile2 <- "/var/scratch/bwn200/patterns/Canon_Ixus55_0_2625.dat"
con <- file(infile1, "rb")
dim <- readBin(con, "integer",20155392)
close(con)
infile2 <- "/var/scratch/bwn200/patterns/Canon_Ixus55_0_2625.dat"
med<-read.csv("med.csv",header=TRUE)
getwd()
setwd("/home/anangavai/ClusterAnalysis")
setwd("/home/anangavai/ClusterAnalysis/")
setwd(/home/anangavai/ClusterAnalysis)
setwd("/home/anangavai/ClusterAnalysis")
setwd()
setwd(/home/anangavai/ClusterAnalysis)
setwd("/home/Desktop")
library(moments)
install.packages("moments")
install.packages("Rserve")
library("Rserve")
tests <- read_file("/home/anandgavai/ANDI/app/data/tests.json")
library (tidyjson)
library(jsonlite)
library (httr)
library(dplyr)
library(readr)
tests <- read_file("/home/anandgavai/ANDI/app/data/tests.json")
prettify(tests)
# convert it into json object
tests %>% as.tbl_json %>%
gather_array
tests %>% as.tbl_json %>%
gather_array %>%
spread_values(tests.id=jstring("id"),tests.label=jstring("label"),tests.value=jstring("value"))
tests %>% as.tbl_json %>%
gather_array %>%
spread_values(tests.id=jstring("id"),tests.label=jstring("label"),tests.value=jstring("value"))%>%
enter_object("children") %>%
gather_array
tests %>% as.tbl_json %>%
gather_array %>%
spread_values(tests.id=jstring("id"),tests.label=jstring("label"),tests.value=jstring("value"))%>%
enter_object("children") %>%
gather_array %>%
spread_values(tests.id=jstring("id"),tests.label=jstring("label"),tests.value=jstring("value"))
tests %>% as.tbl_json %>%
gather_array %>%
spread_values(tests.id=jstring("id"),tests.label=jstring("label"),tests.value=jstring("value"))%>%
enter_object("children") %>%
gather_array %>%
spread_values(tests.id=jstring("id"),tests.label=jstring("label"),tests.value=jstring("value")) %>%
enter_object("children")
tests %>% as.tbl_json %>%
gather_array %>%
spread_values(tests.id=jstring("id"),tests.label=jstring("label"))%>%
enter_object("children") %>%
gather_array %>%
spread_values(tests.id=jstring("id"),tests.label=jstring("label")) %>%
enter_object("children")%>%
gather_array %>%
spread_values(tests.id=jstring("id"),tests.label=jstring("label"))
tests %>% as.tbl_json %>%
gather_array %>%
spread_values(tests.id=jstring("id"),tests.label=jstring("label"))%>%
enter_object("children") %>%
gather_array %>%
spread_values(tests.id=jstring("id"),tests.label=jstring("label")) %>%
enter_object("children")%>%
gather_array %>%
spread_values(tests.id=jstring("id"),tests.label=jstring("label"))%>%
write.csv("teststmp.csv")
getwd()
tests %>% as.tbl_json %>%
gather_array %>%
spread_values(tests.id=jstring("id"),tests.label=jstring("label"))%>%
enter_object("children") %>%
gather_array %>%
spread_values(tests.id=jstring("id"),tests.label=jstring("label")) %>%
enter_object("children")%>%
gather_array %>%
spread_values(tests.id=jstring("id"),tests.label=jstring("label"))%>%
write.csv("/home/anandgavai/ANDI/app/data/teststmp.csv")
setwd("")
tests %>% as.tbl_json %>%
gather_array %>%
spread_values(tests.id=jstring("id"),tests.label=jstring("label"))%>%
enter_object("children") %>%
gather_array %>%
spread_values(tests.id=jstring("id"),tests.label=jstring("label")) %>%
enter_object("children")%>%
gather_array %>%
spread_values(tests.id=jstring("id"),tests.label=jstring("label"))%>%
write.csv("/home/anandgavai/ANDI/app/data/teststmp.csv")
tests %>% as.tbl_json %>%
gather_array %>%
spread_values(tests.id=jstring("id"),tests.label=jstring("label"))%>%
enter_object("children") %>%
gather_array %>%
spread_values(tests.id=jstring("id"),tests.label=jstring("label")) %>%
write.csv("/home/anandgavai/ANDI/app/data/teststmp.csv")
tests %>% as.tbl_json %>%
gather_array %>%
spread_values(tests.label=jstring("label"))%>%
enter_object("children") %>%
gather_array %>%
spread_values(tests.label=jstring("label")) %>%
write.csv("/home/anandgavai/ANDI/app/data/teststmp.csv")
tests %>% as.tbl_json %>%
gather_array %>%
spread_values(tests.label=jstring("label"))%>%
enter_object("children") %>%
gather_array %>%
spread_values(tests.label=jstring("label")) %>%
enter_object("children")%>%
gather_array %>%
spread_values(tests.label=jstring("label"))%>%
write.csv("/home/anandgavai/ANDI/app/data/teststmp.csv")
tests %>% as.tbl_json %>%
gather_array %>%
spread_values(tests.label=jstring("label"))%>%
enter_object("children") %>%
gather_array %>%
spread_values(tests.label=jstring("label")) %>%
write.csv("/home/anandgavai/ANDI/app/data/teststmp.csv")
tests %>% as.tbl_json %>%
gather_array %>%
enter_object("children") %>%
gather_array %>%
enter_object("children") %>%
gather_array %>%
spread_values(tests.label=jstring("label")) %>%
write.csv("/home/anandgavai/ANDI/app/data/teststmp.csv")
tests %>% as.tbl_json %>%
gather_array %>%
enter_object("children") %>%
gather_array %>%
enter_object("children") %>%
spread_values(tests.label=jstring("label"))
# convert it into json object
tests %>% as.tbl_json %>%
gather_array %>%
spread_values(tests.label=jstring("label"))%>%
enter_object("children") %>%
gather_array %>%
spread_values(tests.label=jstring("label"))
# convert it into json object
tests %>% as.tbl_json %>%
gather_array %>%
spread_values(tests.label=jstring("label"))%>%
enter_object("children") %>%
gather_array %>%
spread_values(tests.label=jstring("label")) %>%
write.csv("/home/anandgavai/ANDI/app/data/teststmp.csv")
# convert it into json object
tests %>% as.tbl_json %>%
gather_array %>%
spread_values(tests.label=jstring("label"))%>%
enter_object("children") %>%
spread_values(tests.label=jstring("label"))
tests %>% as.tbl_json %>%
gather_array %>%
spread_values(tests.label=jstring("label"))
tests %>% as.tbl_json %>%
gather_array %>%
spread_values(tests.label=jstring("label"))%>%
enter_object("children") %>%
spread_values(tests.label=jstring("label"))
tests %>% as.tbl_json %>%
gather_array %>%
spread_values(tests.label=jstring("label"))%>%
enter_object("children") %>%
spread_values(tests.label=jstring("label"))%>%
gather_array
tests %>% as.tbl_json %>%
gather_array %>%
spread_values(tests.label=jstring("label"))%>%
enter_object("children") %>%
spread_values(tests.label=jstring("label"))%>%
enter_object("children")
tests %>% as.tbl_json %>%
gather_array %>%
spread_values(tests.label=jstring("label"))%>%
enter_object("children") %>%
spread_values(tests.label=jstring("label"))%>%
gather_array%>%
spread_values(tests.label=jstring("label"))
tests %>% as.tbl_json %>%
gather_array %>%
spread_values(tests.label=jstring("label"))%>%
enter_object("children") %>%
spread_values(tests.label=jstring("label"))%>%
gather_array%>%
spread_values(tests.label=jstring("label"))%>%
write.csv("/home/anandgavai/ANDI/app/data/teststmp.csv")
tests %>% as.tbl_json %>%
gather_array %>%
spread_values(tests.label=jstring("label"))%>%
enter_object("children") %>%
spread_values(tests.label=jstring("label"))%>%
gather_array%>%
spread_values(tests.label=jstring("label"))%>%
write.csv("/home/anandgavai/ANDI/app/data/teststmp.csv")
tests %>% as.tbl_json %>%
gather_array %>%
spread_values(tests.label=jstring("label"))%>%
enter_object("children") %>%
spread_values(tests.label=jstring("label"))%>%
gather_array%>%
spread_values(tests.label=jstring("label"))%>%
gather_array%>%
spread_values(tests.label=jstring("label"))%>%
write.csv("/home/anandgavai/ANDI/app/data/teststmp.csv")
tests %>% as.tbl_json %>%
gather_array %>%
spread_values(tests.label=jstring("label"))%>%
enter_object("children") %>%
spread_values(tests.label=jstring("label"))%>%
gather_array%>%
spread_values(tests.label=jstring("label"))%>%
gather_array %>%
spread_values(tests.label=jstring("label"))%>%
write.csv("/home/anandgavai/ANDI/app/data/teststmp.csv")
tests %>% as.tbl_json %>%
gather_array %>%
spread_values(tests.label=jstring("label"))%>%
enter_object("children") %>%
spread_values(tests.label=jstring("label"))%>%
gather_array%>%
spread_values(tests.label=jstring("label"))%>%
enter_object("children") %>%
spread_values(tests.label=jstring("label"))%>%
write.csv("/home/anandgavai/ANDI/app/data/teststmp.csv")
tests %>% as.tbl_json %>%
gather_array %>%
spread_values(tests.label=jstring("label"))%>%
enter_object("children") %>%
spread_values(tests.label=jstring("label"))%>%
gather_array%>%
spread_values(tests.label=jstring("label"))%>%
gather_array%>%
enter_object("children") %>%
spread_values(tests.label=jstring("label"))%>%
write.csv("/home/anandgavai/ANDI/app/data/teststmp.csv")
tests %>% as.tbl_json %>%
gather_array %>%
spread_values(tests.label=jstring("label"))%>%
enter_object("children") %>%
spread_values(tests.label=jstring("label"))%>%
gather_array%>%
spread_values(tests.label=jstring("label"))%>%
gather_array%>%
spread_values(tests.label=jstring("label"))%>%
write.csv("/home/anandgavai/ANDI/app/data/teststmp.csv")
install.packages(c("arulesViz", "coin", "curl", "doBy", "earth", "fields", "git2r", "Hmisc", "knitr", "maps", "mclust", "mda", "mgcv", "mice", "multcomp", "party", "plotrix", "prodlim", "rgl", "rmarkdown", "RMySQL", "rPython", "RUnit", "seriation", "spam", "timeSeries"))
install.packages(c("BH", "curl", "digest", "ggplot2", "git2r", "htmltools", "jsonlite", "knitr", "Rcpp", "rJava", "rmarkdown", "roxygen2", "rstudioapi", "RUnit", "stringi"), lib="/usr/local/lib/R/site-library")
install.packages(c("arulesViz", "coin", "curl", "doBy", "earth",
install.packages(c("arulesViz", "coin", "curl", "doBy", "earth", "fields", "git2r", "Hmisc", "knitr", "maps", "mclust", "mda", "mgcv", "mice", "multcomp", "party", "plotrix", "prodlim", "rgl", "rmarkdown", "RMySQL", "rPython", "RUnit", "seriation", "spam", "timeSeries"))
install.packages(c("BH", "curl", "digest", "ggplot2", "git2r", "htmltools", "jsonlite", "knitr", "Rcpp", "rJava", "rmarkdown", "roxygen2", "rstudioapi", "RUnit", "stringi"), lib="/usr/local/lib/R/site-library")
install.packages(c("MASS", "Matrix", "mgcv", "nlme"), lib="/usr/lib/R/library")
install.packages("IRKernel",depend=TRUE)
install.packages("IRkernel",depend=TRUE)
install.packages("matlib")
install.packages(c('rzmq','IRkernel','IRdisplay',''),repos=c("http://irkernel.github.io/",getOption('repos')),type="source")
library(installr)
install.packages(c('rzmq','IRkernel','IRdisplay',''),repos=c("http://irkernel.github.io/",getOption('repos')),type="source")
install.packages(c('rzmq','IRkernel','IRdisplay',''),repos=c("http://irkernel.github.io/",getOption('repos')),type="source")
install.packages("installr") # install
setInternet2(TRUE)
installr::updateR() # updating R.
install.packages("installR")
install.packages("~/Desktop/installr_0.17.0.tar.gz", repos = NULL, type = "source")
install.packages(c('rzmq','IRkernel','IRdisplay',''),repos=c("http://irkernel.github.io/",getOption('repos')),type="source")
install.packages("rzmq")
install.packages(c('rzmq','IRkernel','IRdisplay',''),repos=c("http://irkernel.github.io/",getOption('repos')),type="source")
install.packages("rzmq",depend=TRUE,type="source")
IRkernel::installspec()
install.packages("devtools")
install_github("armstrtw/rzmq")
library(dev-tools)
library(devtools)
install_github("armstrtw/rzmq")
install_github("takluyver/IRdisplay")
install_github("takluyver/IRkernel")
a
a<-c("anand")
q()
library(caret)
install.packages("caret")
install.packages("car")
source("http://www.bioconductor.org/biocLite.R")
biocLite("car",depend=TRUE)
setRepositories()
biocLite("car",depend=TRUE)
setRepositories()
biocLite("car",depend=TRUE)
biocLite("car",depend=TRUE)
setRepositories()
biocLite("car",depend=TRUE)
setRepositories()
biocLite("car",depend=TRUE)
setRepositories()
biocLite("car",depend=TRUE)
setRepositories()
biocLite("car",depend=TRUE)
setRepositories()
biocLite("car",depend=TRUE)
setRepositories()
biocLite("car",depend=TRUE)
install.packages("caret",depend=TRUE)
install.packages("~/Desktop/car_2.1-0.tar.gz", repos = NULL, type = "source")
system("which R")
q()
system("which R")
library(jsonlite)
system("which R")
library(nlme)
library(lme4)
q()
library(caret)
quit()
unique_ID1<-(dim(unique(df[,c('ID1')]))[1])
library (gdata)
library (dplyr)
library (jsonlite)
df = read.xls ("//home//anandgavai//ANDI//app//data//2016-01-14//format//ANDI_betaTemplate_0303.xlsx", sheet = 1, header = TRUE)
#Step1:
# count number of rows
dimen<-dim(df)[1]
#Step2:
# count unique ID1
unique_ID1<-(dim(unique(df[,c('ID1')]))[1])
unique_ID1
unique_ID1<-dim(unique(df[,c('ID1')]))[1]
unique_ID1
unique_ID1<-length(unique(df[,c('ID1')]))
unique_ID1
dimen
unique_ID1<-length(df[,c('ID1')])
unique_ID1
colnames(df)
IDCheck<-dim(unique(df[,c('category.short.name','ID1','ID2','ID3','SPSS.name')]))[1]
IDCheck
# count unique combination of ID1, ID2, ID3
IDCheck<-dim(unique(df[,c('category.short.name','ID1','ID2','ID3','SPSS.name')]))[1]
#Step 3:
#Check for special characters in a column
## if Step1 match with Step2 the columns are unique else raise a flag
if(dimen==IDCheck){
print ("SUCCESS: catetory.short.name,ID1, ID2, ID3 and SPSSname are unique")
}else{
print("ERROR: Check category.short.name, ID1, ID2, ID3 and SPSSnames as the do not seem consistant !!")
}
### Now Replace all spaces with "_" to create an identifier concatinating ID1, ID2, ID3 and catenory shortname
category.short.name <- gsub(" ","_",df$category.short.name)
ID1<-gsub(" ","_",df$ID1)
ID2<-gsub(" ","_",df$ID2)
ID3<-gsub(" ","_",df$ID3)
SPSSname<-gsub(" ","_",df$SPSS.name)
category.short.name <- gsub(" ","_",df$category.short.name)
SPSSname
### Check if the 3rd level exists if yes than construct identifier
ID<-ifelse(ID3 =="",ID<-paste(category.short.name,".",ID1,".",ID2,sep=""), ID<-paste(category.short.name,".",ID1,".",ID2,".",ID3,".",SPSSname,sep=""))
### This is my file
df<-cbind(ID, df)
write.csv(df,file="df.csv",row.names=FALSE)
### Start construction json object ###
d<-df
colnames(d)[2]<-"category"
options(stringsAsFactors=FALSE)
y<-d[,c(1,6:15)]
y$category<-data.frame(category=d[,2])
y$category$ID1<-data.frame(ID1=d[,3])
y$category$ID1$ID2<-data.frame(ID2=d[,4])
#Check for special characters in a column
## if Step1 match with Step2 the columns are unique else raise a flag
if(dimen==IDCheck){
print ("SUCCESS: catetory.short.name,ID1, ID2, ID3 and SPSSname are unique")
}else{
print("ERROR: Check category.short.name, ID1, ID2, ID3 and SPSSnames as the do not seem consistant !!")
}
head(df)
### Now Replace all spaces with "_" to create an identifier concatinating ID1, ID2, ID3 and catenory shortname
category.short.name <- gsub(" ","_",df$category.short.name)
ID1<-gsub(" ","_",df$ID1)
ID2<-gsub(" ","_",df$ID2)
ID3<-gsub(" ","_",df$ID3)
SPSSname<-gsub(" ","_",df$SPSS.name)
category.short.name <- gsub(" ","_",df$category.short.name)
### Check if the 3rd level exists if yes than construct identifier
ID<-ifelse(ID3 =="",ID<-paste(category.short.name,".",ID1,".",ID2,".",SPSSname,sep=""), ID<-paste(category.short.name,".",ID1,".",ID2,".",ID3,".",SPSSname,sep=""))
### This is my file
df<-cbind(ID, df)
write.csv(df,file="df.csv",row.names=FALSE)
### Start construction json object ###
d<-df
colnames(d)[2]<-"category"
options(stringsAsFactors=FALSE)
y<-d[,c(1,6:15)]
y$category<-data.frame(category=d[,2])
y$category$ID1<-data.frame(ID1=d[,3])
y$category$ID1$ID2<-data.frame(ID2=d[,4])
y$category$ID1$ID2$ID3<-data.frame(ID3=d[,5])
write(toJSON(y, pretty = TRUE),file="tests.json")
df
head(df)
y
load("/home/anandgavai/ANDI/app/data/2016-01-14/summaryStatistics.Rdata")
setwd("//home//anandgavai//ANDI//flask")
library(jsonlite)
#print(ls())
mydata <- fromJSON("2patients.json")
id <- mydata$patients['id']
Npatients <- length(id[,1])
age <- as.numeric(unlist(mydata$patients['age']))
sex <- as.numeric(unlist(mydata$patients['sex']))
edu <- as.numeric(unlist(mydata$patients['education']))
whichtests <- numeric()
patientscores <- numeric()
for( i in 1:Npatients){
patientscores <- cbind( patientscores, mydata$patients$test[[i]]$score)
whichtests  <- rbind( whichtests, mydata$patients$test[[i]]$id)
}
whichtests <- whichtests[1,]
patientscores <- matrix(as.numeric(patientscores), nrow = Npatients, byrow = T)
tailed <- mydata$sig
widthconfint <- as.numeric(mydata$conf)
# defaultvalues
testnames <- c("AVLTtotal","LF_totalletter123","TMTa","TMTb")
testIDs <- c("2-1-5","6-1-3","5-0-0","5-0-1")######
load("Everythingyouneed(andnotmuchmore).RData")
covariancemat <- est.cov.matrix.total
# selection of appropriate sections of matrices and vectors, given which tests the patient has completed
# and applying the same transformations to the patient data that were applied to the control data
whichtestindexes <- match(whichtests,testIDs)
whichtestnames <- testnames[whichtestindexes]
powertransform.selection <- metadata$mybestpowertransform[whichtestindexes]
standardizing.means.selection <- metadata$mymean.transformedscores[whichtestindexes]
standardizing.sds.selection <- metadata$mysd.transformedscores[whichtestindexes]
transformed.patientscores <- patientscores^powertransform.selection
transformed.patientscores[powertransform.selection < 0] <- transformed.patientscores[powertransform.selection < 0] * -1
transformed.patientscores.standardized <- ( transformed.patientscores - standardizing.means.selection) / standardizing.sds.selection
#
C <- covariancemat[whichtestindexes, whichtestindexes]
inv.C <- solve(C)
age.centered <- age - 65
#
pred.y <- matrix( NA, Npatients, 4)
tstatistics <- matrix( NA, Npatients, length(whichtests) )
Tsquared <- matrix( NA, Npatients)
[whichtestindexes]
[whichtestindexes]
[whichtestindexes]
[whichtestindexes]
[whichtestindexes]
[whichtestindexes]
[whichtestindexes]
[whichtestindexes]
[whichtestindexes]
[whichtestindexes]
[whichtestindexes]
source('~/ANDI/flask/functionforANDI6.R')
myoutputdata
