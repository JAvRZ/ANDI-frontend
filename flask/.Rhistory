}
save.rdf(store,"pp_accession.ttl","TURTLE")
source('~/Documents/ODEX4all/DB_Connect.R')
source('~/Documents/ODEX4all/DB_Connect.R')
sample_data<-rs[,c("accessionID","accessionName")]
sample_data
# desc<- dbGetQuery(mydb,"desc pp_accession ;") # get the description of the table metadata
#create triple data.frame for first accession name
# Create a triple store
store = new.rdf()
for (i in 1:dim(sample_data)[1]){
subject=paste("https://www.eu-sol.wur.nl/fair/v1/germplasm/",sample_data[i,1],sep="")
predicate=paste("http://example.org/Predicate/",colnames(sample_data[2]),sep="")
object=sample_data[i,2]
add.triple(store,subject,predicate,object)
}
save.rdf(store,"pp_accession.ttl","TURTLE")
source('~/Documents/ODEX4all/DB_Connect.R')
source('~/Documents/ODEX4all/DB_Connect.R')
source('~/Documents/ODEX4all/BreeDB2RDF.R')
library(help=rdf)
library(help=rrdf)
source('~/Documents/ODEX4all/BreeDB2RDF.R')
source('~/Documents/ODEX4all/BreeDB2RDF.R')
source('~/Documents/ODEX4all/BreeDB2RDF.R')
source('~/Documents/ODEX4all/BreeDB2RDF.R')
library(rrdf)
vignette()
vignette("rrdf")
v1<-vignette("rrdf")
print(v1)
)
)
source('~/Documents/ODEX4all/Vignette_rrdf.R')
library(git2r)
path <- tempfile(pattern="git2r-")
dir.create(path)
repo <- init(path)
is_bare(repo)
path <- tempfile(pattern="git2r-")
dir.create(path)
path <- tempfile(pattern="git2r-")
dir.create(path)
is_bare(repo)
path <- file.path(tempfile(pattern="git2r-"), "git2r")
dir.create(path, recursive=TRUE)
repo <- clone("https://github.com/ropensci/git2r", path)
summary(repo)
getwd
getwd()
dir()
dir.create("./home/anandgavai/Documents/rrdf_vignette", recursive=TRUE)
path<-"/home/anandgavai/Documents/rrdf_vignette"
dir.create("./home/anandgavai/Documents/rrdf_vignette", recursive=TRUE)
path
repo <- clone("https://github.com/egonw/rrdf", path)
library(RMySQL)
library(rrdf)
library(rols)
library(paxtoolsr) # Access Pathway information in owl format
library(sqldf)  # Check Ontobee for a more comprehensive
mydb = dbConnect(MySQL(), user='root', password='p051D0n10', dbname='breedb', host='localhost')
table_list<- dbListTables(mydb)
field_names<- dbListFields(mydb, 'pp_accession')
dat = dbGetQuery(mydb, "select * from pp_accession") # result remains on the MySQL database
# Select latitude,longitude, collectionsitecountry, collectionSite, province
rs<-dat[,c("accessionID","accessionName","gpsLat","gpsLong","collectionSiteCountry","collectionSite","collectionSiteProvence")]
rs<-rs[which(rs[,"gpsLat"]!="NA"),]
# Filter for selected germ plasm field
# https://www.eu-sol.wur.nl/fair/v1/germplasm/EA00258
# Example row 5693
sample_data<-rs[,c("accessionID","accessionName")]
# desc<- dbGetQuery(mydb,"desc pp_accession ;") # get the description of the table metadata
# Create a triple store for each column make sure the primary key is the first column
# sample_data is table with 2 columns, prefix_pred is the prerix uri, type is the datatype of the column
# Create Triple store for data literals
create_triple_store_literal<-function(sample_data,prefix_pred,type){
# Create a triple store
store = new.rdf(ontology=TRUE)
for (i in 1:dim(sample_data)[1]){
subject=paste("https://www.eu-sol.wur.nl/fair/v1/germplasm/",sample_data[i,1],sep="")
predicate=paste(prefix_pred,colnames(sample_data[2]),sep="")
data=sample_data[i,2]
type=type
add.data.triple(store,subject,predicate,data,type)
}
save.rdf(store,paste(colnames(sample_data)[2],".ttl",sep=""),"TURTLE")
}
head(dat)
dat[,c(11,13)]
which(dat[,c(11,13)!="NA"]
)
which(dat[,11!]="NA")
which(dat[,11!]="NA")
which(dat[,11!]!="NA")
which(dat[,11]!="NA")
dat[which(dat[,11]!="NA"),]
dat[which(dat[,11]!="NA"),c(11,13)]
dat[which(dat[,11]!="NA"),c(1,11,13)]
dat[which(dat[,11]!="NA"),c(2,11,13)]
dat[which(dat[,11]!="NA"),c(3,11,13)]
colnames(dat)
dat[which(dat[,11]!="NA"),c(17,11,13)]
library(rjson)
vignette()
vignette("rjson")
vignette(package="rjson")
vignette(help="rjson")
dat[which(dat[,11]!="NA"),c(3,11,13)]
colnames(dat)
library(RMySQL)
library(rrdf)
library(rols)
library(paxtoolsr) # Access Pathway information in owl format
library(sqldf)  # Check Ontobee for a more comprehensive
mydb = dbConnect(MySQL(), user='root', password='p051D0n10', dbname='breedb', host='localhost')
table_list<- dbListTables(mydb)
field_names<- dbListFields(mydb, 'pp_accession')
dat = dbGetQuery(mydb, "select * from pp_accession") # result remains on the MySQL database
dat[which(dat[,11]!="NA"),c(11,13)]
colnames(dat)
dat[which(dat[,11]!="NA"),c(11,13)]
dat[which(dat[,11]!="NA"),c(11,13)][1]
dat[which(dat[,11]!="NA"),c(11,13)][1,]
dat[which(dat[,11]!="NA"),]
dat[which(dat[,11]!="NA"),][1,]
dat[which(dat[,11]!="NA"),][1,1]
dat[which(dat[,11]!="NA"),][,1]
dat[which(dat[,11]!="NA"),][,2]
colnames(dat)
dat[which(dat[,11]!="NA"),][,9]
dat[which(dat[,11]!="NA"),][,2]
dat[which(dat[,11]!="NA"),][,26]
dat[which(dat[,11]!="NA"),c(11,13)]
?readBin
infile1 <- "/var/scratch/bwn200/patterns/Agfa_Sensor505-x_0_1890.dat"
infile2 <- "/var/scratch/bwn200/patterns/Canon_Ixus55_0_2625.dat"
con <- file(infile1, "rb")
dim <- readBin(con, "integer",20155392)
close(con)
infile2 <- "/var/scratch/bwn200/patterns/Canon_Ixus55_0_2625.dat"
med<-read.csv("med.csv",header=TRUE)
getwd()
setwd("/home/anangavai/ClusterAnalysis")
setwd("/home/anangavai/ClusterAnalysis/")
setwd(/home/anangavai/ClusterAnalysis)
setwd("/home/anangavai/ClusterAnalysis")
setwd()
setwd(/home/anangavai/ClusterAnalysis)
setwd("/home/Desktop")
library(moments)
install.packages("moments")
install.packages("Rserve")
library("Rserve")
tests <- read_file("/home/anandgavai/ANDI/app/data/tests.json")
library (tidyjson)
library(jsonlite)
library (httr)
library(dplyr)
library(readr)
tests <- read_file("/home/anandgavai/ANDI/app/data/tests.json")
prettify(tests)
# convert it into json object
tests %>% as.tbl_json %>%
gather_array
tests %>% as.tbl_json %>%
gather_array %>%
spread_values(tests.id=jstring("id"),tests.label=jstring("label"),tests.value=jstring("value"))
tests %>% as.tbl_json %>%
gather_array %>%
spread_values(tests.id=jstring("id"),tests.label=jstring("label"),tests.value=jstring("value"))%>%
enter_object("children") %>%
gather_array
tests %>% as.tbl_json %>%
gather_array %>%
spread_values(tests.id=jstring("id"),tests.label=jstring("label"),tests.value=jstring("value"))%>%
enter_object("children") %>%
gather_array %>%
spread_values(tests.id=jstring("id"),tests.label=jstring("label"),tests.value=jstring("value"))
tests %>% as.tbl_json %>%
gather_array %>%
spread_values(tests.id=jstring("id"),tests.label=jstring("label"),tests.value=jstring("value"))%>%
enter_object("children") %>%
gather_array %>%
spread_values(tests.id=jstring("id"),tests.label=jstring("label"),tests.value=jstring("value")) %>%
enter_object("children")
tests %>% as.tbl_json %>%
gather_array %>%
spread_values(tests.id=jstring("id"),tests.label=jstring("label"))%>%
enter_object("children") %>%
gather_array %>%
spread_values(tests.id=jstring("id"),tests.label=jstring("label")) %>%
enter_object("children")%>%
gather_array %>%
spread_values(tests.id=jstring("id"),tests.label=jstring("label"))
tests %>% as.tbl_json %>%
gather_array %>%
spread_values(tests.id=jstring("id"),tests.label=jstring("label"))%>%
enter_object("children") %>%
gather_array %>%
spread_values(tests.id=jstring("id"),tests.label=jstring("label")) %>%
enter_object("children")%>%
gather_array %>%
spread_values(tests.id=jstring("id"),tests.label=jstring("label"))%>%
write.csv("teststmp.csv")
getwd()
tests %>% as.tbl_json %>%
gather_array %>%
spread_values(tests.id=jstring("id"),tests.label=jstring("label"))%>%
enter_object("children") %>%
gather_array %>%
spread_values(tests.id=jstring("id"),tests.label=jstring("label")) %>%
enter_object("children")%>%
gather_array %>%
spread_values(tests.id=jstring("id"),tests.label=jstring("label"))%>%
write.csv("/home/anandgavai/ANDI/app/data/teststmp.csv")
setwd("")
tests %>% as.tbl_json %>%
gather_array %>%
spread_values(tests.id=jstring("id"),tests.label=jstring("label"))%>%
enter_object("children") %>%
gather_array %>%
spread_values(tests.id=jstring("id"),tests.label=jstring("label")) %>%
enter_object("children")%>%
gather_array %>%
spread_values(tests.id=jstring("id"),tests.label=jstring("label"))%>%
write.csv("/home/anandgavai/ANDI/app/data/teststmp.csv")
tests %>% as.tbl_json %>%
gather_array %>%
spread_values(tests.id=jstring("id"),tests.label=jstring("label"))%>%
enter_object("children") %>%
gather_array %>%
spread_values(tests.id=jstring("id"),tests.label=jstring("label")) %>%
write.csv("/home/anandgavai/ANDI/app/data/teststmp.csv")
tests %>% as.tbl_json %>%
gather_array %>%
spread_values(tests.label=jstring("label"))%>%
enter_object("children") %>%
gather_array %>%
spread_values(tests.label=jstring("label")) %>%
write.csv("/home/anandgavai/ANDI/app/data/teststmp.csv")
tests %>% as.tbl_json %>%
gather_array %>%
spread_values(tests.label=jstring("label"))%>%
enter_object("children") %>%
gather_array %>%
spread_values(tests.label=jstring("label")) %>%
enter_object("children")%>%
gather_array %>%
spread_values(tests.label=jstring("label"))%>%
write.csv("/home/anandgavai/ANDI/app/data/teststmp.csv")
tests %>% as.tbl_json %>%
gather_array %>%
spread_values(tests.label=jstring("label"))%>%
enter_object("children") %>%
gather_array %>%
spread_values(tests.label=jstring("label")) %>%
write.csv("/home/anandgavai/ANDI/app/data/teststmp.csv")
tests %>% as.tbl_json %>%
gather_array %>%
enter_object("children") %>%
gather_array %>%
enter_object("children") %>%
gather_array %>%
spread_values(tests.label=jstring("label")) %>%
write.csv("/home/anandgavai/ANDI/app/data/teststmp.csv")
tests %>% as.tbl_json %>%
gather_array %>%
enter_object("children") %>%
gather_array %>%
enter_object("children") %>%
spread_values(tests.label=jstring("label"))
# convert it into json object
tests %>% as.tbl_json %>%
gather_array %>%
spread_values(tests.label=jstring("label"))%>%
enter_object("children") %>%
gather_array %>%
spread_values(tests.label=jstring("label"))
# convert it into json object
tests %>% as.tbl_json %>%
gather_array %>%
spread_values(tests.label=jstring("label"))%>%
enter_object("children") %>%
gather_array %>%
spread_values(tests.label=jstring("label")) %>%
write.csv("/home/anandgavai/ANDI/app/data/teststmp.csv")
# convert it into json object
tests %>% as.tbl_json %>%
gather_array %>%
spread_values(tests.label=jstring("label"))%>%
enter_object("children") %>%
spread_values(tests.label=jstring("label"))
tests %>% as.tbl_json %>%
gather_array %>%
spread_values(tests.label=jstring("label"))
tests %>% as.tbl_json %>%
gather_array %>%
spread_values(tests.label=jstring("label"))%>%
enter_object("children") %>%
spread_values(tests.label=jstring("label"))
tests %>% as.tbl_json %>%
gather_array %>%
spread_values(tests.label=jstring("label"))%>%
enter_object("children") %>%
spread_values(tests.label=jstring("label"))%>%
gather_array
tests %>% as.tbl_json %>%
gather_array %>%
spread_values(tests.label=jstring("label"))%>%
enter_object("children") %>%
spread_values(tests.label=jstring("label"))%>%
enter_object("children")
tests %>% as.tbl_json %>%
gather_array %>%
spread_values(tests.label=jstring("label"))%>%
enter_object("children") %>%
spread_values(tests.label=jstring("label"))%>%
gather_array%>%
spread_values(tests.label=jstring("label"))
tests %>% as.tbl_json %>%
gather_array %>%
spread_values(tests.label=jstring("label"))%>%
enter_object("children") %>%
spread_values(tests.label=jstring("label"))%>%
gather_array%>%
spread_values(tests.label=jstring("label"))%>%
write.csv("/home/anandgavai/ANDI/app/data/teststmp.csv")
tests %>% as.tbl_json %>%
gather_array %>%
spread_values(tests.label=jstring("label"))%>%
enter_object("children") %>%
spread_values(tests.label=jstring("label"))%>%
gather_array%>%
spread_values(tests.label=jstring("label"))%>%
write.csv("/home/anandgavai/ANDI/app/data/teststmp.csv")
tests %>% as.tbl_json %>%
gather_array %>%
spread_values(tests.label=jstring("label"))%>%
enter_object("children") %>%
spread_values(tests.label=jstring("label"))%>%
gather_array%>%
spread_values(tests.label=jstring("label"))%>%
gather_array%>%
spread_values(tests.label=jstring("label"))%>%
write.csv("/home/anandgavai/ANDI/app/data/teststmp.csv")
tests %>% as.tbl_json %>%
gather_array %>%
spread_values(tests.label=jstring("label"))%>%
enter_object("children") %>%
spread_values(tests.label=jstring("label"))%>%
gather_array%>%
spread_values(tests.label=jstring("label"))%>%
gather_array %>%
spread_values(tests.label=jstring("label"))%>%
write.csv("/home/anandgavai/ANDI/app/data/teststmp.csv")
tests %>% as.tbl_json %>%
gather_array %>%
spread_values(tests.label=jstring("label"))%>%
enter_object("children") %>%
spread_values(tests.label=jstring("label"))%>%
gather_array%>%
spread_values(tests.label=jstring("label"))%>%
enter_object("children") %>%
spread_values(tests.label=jstring("label"))%>%
write.csv("/home/anandgavai/ANDI/app/data/teststmp.csv")
tests %>% as.tbl_json %>%
gather_array %>%
spread_values(tests.label=jstring("label"))%>%
enter_object("children") %>%
spread_values(tests.label=jstring("label"))%>%
gather_array%>%
spread_values(tests.label=jstring("label"))%>%
gather_array%>%
enter_object("children") %>%
spread_values(tests.label=jstring("label"))%>%
write.csv("/home/anandgavai/ANDI/app/data/teststmp.csv")
tests %>% as.tbl_json %>%
gather_array %>%
spread_values(tests.label=jstring("label"))%>%
enter_object("children") %>%
spread_values(tests.label=jstring("label"))%>%
gather_array%>%
spread_values(tests.label=jstring("label"))%>%
gather_array%>%
spread_values(tests.label=jstring("label"))%>%
write.csv("/home/anandgavai/ANDI/app/data/teststmp.csv")
install.packages(c("arulesViz", "coin", "curl", "doBy", "earth", "fields", "git2r", "Hmisc", "knitr", "maps", "mclust", "mda", "mgcv", "mice", "multcomp", "party", "plotrix", "prodlim", "rgl", "rmarkdown", "RMySQL", "rPython", "RUnit", "seriation", "spam", "timeSeries"))
install.packages(c("BH", "curl", "digest", "ggplot2", "git2r", "htmltools", "jsonlite", "knitr", "Rcpp", "rJava", "rmarkdown", "roxygen2", "rstudioapi", "RUnit", "stringi"), lib="/usr/local/lib/R/site-library")
install.packages(c("arulesViz", "coin", "curl", "doBy", "earth",
install.packages(c("arulesViz", "coin", "curl", "doBy", "earth", "fields", "git2r", "Hmisc", "knitr", "maps", "mclust", "mda", "mgcv", "mice", "multcomp", "party", "plotrix", "prodlim", "rgl", "rmarkdown", "RMySQL", "rPython", "RUnit", "seriation", "spam", "timeSeries"))
install.packages(c("BH", "curl", "digest", "ggplot2", "git2r", "htmltools", "jsonlite", "knitr", "Rcpp", "rJava", "rmarkdown", "roxygen2", "rstudioapi", "RUnit", "stringi"), lib="/usr/local/lib/R/site-library")
install.packages(c("MASS", "Matrix", "mgcv", "nlme"), lib="/usr/lib/R/library")
install.packages("IRKernel",depend=TRUE)
install.packages("IRkernel",depend=TRUE)
install.packages("matlib")
install.packages(c('rzmq','IRkernel','IRdisplay',''),repos=c("http://irkernel.github.io/",getOption('repos')),type="source")
library(installr)
install.packages(c('rzmq','IRkernel','IRdisplay',''),repos=c("http://irkernel.github.io/",getOption('repos')),type="source")
install.packages(c('rzmq','IRkernel','IRdisplay',''),repos=c("http://irkernel.github.io/",getOption('repos')),type="source")
install.packages("installr") # install
setInternet2(TRUE)
installr::updateR() # updating R.
install.packages("installR")
install.packages("~/Desktop/installr_0.17.0.tar.gz", repos = NULL, type = "source")
install.packages(c('rzmq','IRkernel','IRdisplay',''),repos=c("http://irkernel.github.io/",getOption('repos')),type="source")
install.packages("rzmq")
install.packages(c('rzmq','IRkernel','IRdisplay',''),repos=c("http://irkernel.github.io/",getOption('repos')),type="source")
install.packages("rzmq",depend=TRUE,type="source")
IRkernel::installspec()
install.packages("devtools")
install_github("armstrtw/rzmq")
library(dev-tools)
library(devtools)
install_github("armstrtw/rzmq")
install_github("takluyver/IRdisplay")
install_github("takluyver/IRkernel")
getwd()
setwd(paste(getwd(),"/ANDI/flask"))
setwd(paste(getwd(),"/ANDI/flask",sep=""))
getwd()
setwd("C:/Users/jagelin1/Documents/Nan/Non-normality2/RuntheMMNCmodel")
library(jsonlite)
print(ls())
mydata <- fromJSON("2patients.json")
id <- mydata$patients['id']
Npatients <- length(id[,1])
age <- as.numeric(unlist(mydata$patients['age']))
sex <- as.numeric(unlist(mydata$patients['sex']))
edu <- as.numeric(unlist(mydata$patients['education']))
whichtests <- numeric()
patientscores <- numeric()
for( i in 1:Npatients){
patientscores <- cbind( patientscores, mydata$patients$test[[i]]$score)
whichtests  <- rbind( whichtests, mydata$patients$test[[i]]$id)
}
whichtests <- whichtests[1,]
patientscores <- matrix(as.numeric(patientscores), nrow = Npatients, byrow = T)
tailed <- mydata$sig
widthconfint <- as.numeric(mydata$conf)
# defaultvalues
testnames <- c("AVLTtotal","LF_totalletter123","TMTa","TMTb")
testIDs <- c("2-1-5","6-1-3","5-0-0","5-0-1")######
load("~/Nan/Non-normality2/RuntheMMNCmodel/Everythingyouneed(andnotmuchmore).RData")
covariancemat <- est.cov.matrix.total
# selection of appropriate sections of matrices and vectors, given which tests the patient has completed
# and applying the same transformations to the patient data that were applied to the control data
whichtestindexes <- match(whichtests,testIDs)
whichtestnames <- testnames[whichtestindexes]
powertransform.selection <- metadata$mybestpowertransform[whichtestindexes]
standardizing.means.selection <- metadata$mymean.transformedscores[whichtestindexes]
standardizing.sds.selection <- metadata$mysd.transformedscores[whichtestindexes]
transformed.patientscores <- patientscores^powertransform.selection
transformed.patientscores[powertransform.selection < 0] <- transformed.patientscores[powertransform.selection < 0] * -1
transformed.patientscores.standardized <- ( transformed.patientscores - standardizing.means.selection) / standardizing.sds.selection
#
C <- covariancemat[whichtestindexes, whichtestindexes]
inv.C <- solve(C)
age.centered <- age - 65
testnames <- c("AVLTtotal","LF_totalletter123","TMTa","TMTb")
testIDs <- c("2-1-5","6-1-3","5-0-0","5-0-1")######
load("Everythingyouneed(andnotmuchmore).RData")
covariancemat <- est.cov.matrix.total
# selection of appropriate sections of matrices and vectors, given which tests the patient has completed
# and applying the same transformations to the patient data that were applied to the control data
whichtestindexes <- match(whichtests,testIDs)
whichtestnames <- testnames[whichtestindexes]
powertransform.selection <- metadata$mybestpowertransform[whichtestindexes]
standardizing.means.selection <- metadata$mymean.transformedscores[whichtestindexes]
standardizing.sds.selection <- metadata$mysd.transformedscores[whichtestindexes]
transformed.patientscores <- patientscores^powertransform.selection
transformed.patientscores[powertransform.selection < 0] <- transformed.patientscores[powertransform.selection < 0] * -1
transformed.patientscores.standardized <- ( transformed.patientscores - standardizing.means.selection) / standardizing.sds.selection
#
C <- covariancemat[whichtestindexes, whichtestindexes]
inv.C <- solve(C)
age.centered <- age - 65
#
pred.y <- matrix( NA, Npatients, 4)
tstatistics <- matrix( NA, Npatients, length(whichtests) )
Tsquared <- matrix( NA, Npatients)
for( i in 1:Npatients){
pred.y[i,] <- t( t(c(1,sex[i],age.centered[i],edu[i],sex[i]*age.centered[i],sex[i]*edu[i],age.centered[i]*edu[i],sex[i]*age.centered[i]*edu[i]) %x% diag(1,4)) %*% Beta)
names(pred.y) <- testnames
pred.y.selection <- pred.y[i,whichtestindexes]
est.n <- myNspertest[whichtestindexes]
min.est.n <- min(est.n)
dfs <- est.n - 1
g <- ( min.est.n  + 1 ) / min.est.n
#
#
#
# output
Tsquared[i] <- ( 1 / g ) * ( ( min.est.n - P ) / ( ( min.est.n - 1 ) * P ) ) * t( pred.y.selection - transformed.patientscores.standardized[i,] ) %*% inv.C %*% ( pred.y.selection - transformed.patientscores.standardized[i,] )
tstatistics[i,] <- ((transformed.patientscores.standardized[i,] - pred.y.selection) / ( sqrt(diag(C)) / sqrt(est.n))) * (1 / sqrt(est.n + 1))
}
if( tailed == "twotailed"){
inneredge <- qt( (1 - ( widthconfint / 100)) / 2, dfs)
outeredge <- abs( qt( (1 - ( widthconfint / 100)) / 2, dfs))
}
#
# covariancemat
# myoutputdataframe <- data.frame( key = id, values = matrix(c(1,-.5),2,1), mean = 0)
# myoutputdata <- toJSON( myoutputdataframe)
myoutputdataframe <- data.frame( key = id, values = matrix(c(1,-.5),2,1), mean = 0)
myoutputdata <- toJSON( myoutputdataframe)
myoutputdata
source("http://www.bioconductor.org/biocLite.R")
biocLite("caret",depend=TRUE)
library(caret)
biocLite("caret",depend=TRUE)
biocLite("car",depend=TRUE)
